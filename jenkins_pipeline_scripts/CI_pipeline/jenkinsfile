pipeline {
    agent any
    
    environment {
        CONTAINER_NAME = 'CI_container'
    }

    stages {
        stage('Stop old container') {
            steps {
                echo "[INFO] Step 1 start -------------------------------------------------------------------------------------"
                echo "[INFO] Stop old container"
                script {
                    // Check container status
                    def con_status = sh(script: "sudo docker ps -q -f name=${env.CONTAINER_NAME}", returnStdout: true).trim()
                    sh"sudo docker ps -f name=${env.CONTAINER_NAME}"
                    
                    if (con_status) {
                        // Kill if container is running
                        sh "sudo docker kill ${env.CONTAINER_NAME}"
                        sh"sudo docker ps -f name=${env.CONTAINER_NAME}"
                    }
                }
                echo "[INFO] Step 1 complete ----------------------------------------------------------------------------------"
            }
        }
        stage('Remove old container') {
            steps {
                echo "[INFO] Step 2 start -------------------------------------------------------------------------------------"
                echo "[INFO] Remove old container"
                script {
                    // Check container status
                    def con_status = sh(script: "sudo docker ps -q -a -f name=${env.CONTAINER_NAME}", returnStdout: true).trim()
                    sh"sudo docker ps -a -f name=${env.CONTAINER_NAME}"
                    
                    if (con_status) {
                        // Remove container if stoped
                        sh "sudo docker rm ${env.CONTAINER_NAME}"
                        sh"sudo docker ps -a -f name=${env.CONTAINER_NAME}"
                    }
                }
                echo "[INFO] Step 2 complete ----------------------------------------------------------------------------------"
            }
        }
        stage('Spinup container') {
            steps {
                echo "[INFO] Step 3 start -------------------------------------------------------------------------------------"
                echo "[INFO] Spinup container"
                sh "sudo docker run -itd --name ${env.CONTAINER_NAME} -p 3000:8070 openjdk:11"
                echo "[INFO] Step 3 complete ----------------------------------------------------------------------------------"
            }
        }
        stage('Setup container') {
            steps {
                echo "[INFO] Step 4 start -------------------------------------------------------------------------------------"
                echo "[INFO] Setup container"
                sh "sudo docker cp /projects/Real_Time_CICD_Pipeline/scripts ${env.CONTAINER_NAME}:/home"
                echo "[INFO] Step 4 complete ----------------------------------------------------------------------------------"
            }
        }
        stage('Git Checkout') {
            steps {
                echo "[INFO] Step 5 start -------------------------------------------------------------------------------------"
                echo "[INFO] Clone repo 'https://github.com/jaiswaladi246/GitOps-CI.git'"
                sh "sudo docker exec ${env.CONTAINER_NAME} bash /home/scripts/clone_project.sh"
                echo "[INFO] Step 5 omplete -----------------------------------------------------------------------------------"
            }
        }
        stage('Maven complie project') {
            steps {
                echo "[INFO] Step 6 start -------------------------------------------------------------------------------------"
                echo "[INFO] Maven complie project"
                sh "sudo docker exec ${env.CONTAINER_NAME} bash /home/scripts/compile_project.sh"
                echo "[INFO] Step 6 omplete -----------------------------------------------------------------------------------"
            }
        }
        stage('Sonarqube analysis') {
            steps {
                echo "[INFO] Step 7 start -------------------------------------------------------------------------------------"
                echo "[INFO] Sonarqube analysis"
                script {
                    try {
                        // Execute Docker command to get the IP address of the 'sonarqube' container
                        // and store it in the 'sonar_ip' variable
                        def sonar_ip = sh(
                            script: "sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' sonarqube",
                            returnStdout: true
                        ).trim() // Trim to remove any newline characters
                        
                        sh"sudo docker exec ${env.CONTAINER_NAME} bash /home/scripts/sonar_analysis.sh ${sonar_ip}"
                        
                    } catch (Exception e) {
                        echo "Failed to get SonarQube IP: ${e.getMessage()}"
                    }
                }
                echo "[INFO] Step 7 complete -----------------------------------------------------------------------------------"
            }
        }
        
        
        
        
        
        
        
        
    }
}
